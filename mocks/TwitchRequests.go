// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entities "github.com/AlecSmith96/fourth-floor-exercise/internal/entities"
import mock "github.com/stretchr/testify/mock"

// TwitchRequests is an autogenerated mock type for the TwitchRequests type
type TwitchRequests struct {
	mock.Mock
}

// GetVideosForUser provides a mock function with given fields: userID, limit
func (_m *TwitchRequests) GetVideosForUser(userID string, limit string) ([]entities.VideoData, error) {
	ret := _m.Called(userID, limit)

	var r0 []entities.VideoData
	if rf, ok := ret.Get(0).(func(string, string) []entities.VideoData); ok {
		r0 = rf(userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.VideoData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObtainAccessToken provides a mock function with given fields: clientID, clientSecret
func (_m *TwitchRequests) ObtainAccessToken(clientID string, clientSecret string) (*entities.AccessToken, error) {
	ret := _m.Called(clientID, clientSecret)

	var r0 *entities.AccessToken
	if rf, ok := ret.Get(0).(func(string, string) *entities.AccessToken); ok {
		r0 = rf(clientID, clientSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clientID, clientSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
